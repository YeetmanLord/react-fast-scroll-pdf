{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["PlaceholderPage","type","loadingImage","React","style","width","height","data-type","src","faSpinner","className","alt","PDFPage","pageNum","children","id","imageSrc","source","quality","enableAnnotations","useState","pdfDoc","setPdfDoc","pages","setPages","scaleRef","useRef","prevSource","viewportRef","renderQueue","pdfjsLib","pageCanvasRef","document","createElement","linkService","useMemo","PDFLinkService","pageRendering","renderPage","useCallback","num","current","getPage","then","page","viewport","getViewport","scale","ctx","getContext","render","canvasContext","enableWebGL","promise","getAnnotations","annotationData","annotationDiv","AnnotationLayer","clone","dontFlip","div","annotations","oldPages","newPages","toDataURL","key","parse","outerHTML","cleanup","length","no","shift","e","console","error","queueRenderPage","includes","push","changeZoom","viewer","scrollContainer","oldHeight","currPage","i","offsetTop","scrollTop","map","pg","index","Fragment","props","numPages","useEffect","url","data","range","_","isEqual","lib","pdfjsWorker","GlobalWorkerOptions","workerSrc","getDocument","cMapUrl","cMapPacked","pdfDocument","destroy","App","scrollContainerRef","viewerRef","zoom","setZoom","file","setFile","sourceOptions","usePDF","onChange","ev","target","files","fileReader","FileReader","onload","result","arr","Uint8Array","readAsArrayBuffer","ref","overflow","onClick","newZoom","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b009d466.chunk.js","sourcesContent":["// @ts-ignore\nimport { PDFLinkService } from \"pdfjs-dist/es5/web/pdf_viewer\";\nimport React, {\n\tuseEffect, useState, useRef, useCallback, useMemo, Fragment\n} from \"react\";\nimport styles from \"./styles/usePDF.module.css\";\nimport parse from \"react-html-parser\";\nimport { PDFDocumentProxy, PDFPageProxy } from \"pdfjs-dist/types/display/api\";\nimport { PageViewport } from \"pdfjs-dist/types/display/display_utils\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\"\nimport _ from \"lodash\";\n\nconst CMAP_URL = \"pdfjs-dist/cmaps/\";\n\nconst PlaceholderPage = ({ width, height, type = \"place\", loadingImage = faSpinner }: IPlaceholderPage): JSX.Element => (\n\t<div style={{ width: `${width}px`, height: `${height}px` }} data-type={type}>\n\t\t<img src={loadingImage} className={styles.spinner} alt=\"Loading...\" />\n\t</div>\n);\n\nconst PDFPage = ({\n\twidth, height, pageNum, imageSrc, children, type = \"canvas\"\n}: IPDFPage): JSX.Element => (\n\t<div data-type={type} id={`page${pageNum}`} style={{ width: `${width}px`, height: `${height}px` }}>\n\t\t<img src={imageSrc} style={{ width: \"100%\", height: \"100%\" }} alt={`Page ${pageNum}`} />\n\t\t{ children }\n\t</div>\n);\n\nexport const usePDF = ({ source, loadingImage, quality = 80, enableAnnotations = true }: IUsePDF) => {\n\tconst [pdfDoc, setPdfDoc] = useState<PDFDocumentProxy>();\n\tconst [pages, setPages] = useState<JSX.Element[]>([]);\n\tconst scaleRef = useRef(1);\n  const prevSource = useRef();\n\tconst viewportRef = useRef<PageViewport>();\n\tconst renderQueue = useRef<number[]>([]);\n\tconst pdfjsLib = useRef<Partial<IPDFJSLib>>({});\n\tconst pageCanvasRef = useRef(document.createElement(\"canvas\"));\n\tconst linkService = useMemo(() => new PDFLinkService(), []);\n\tconst pageRendering = useRef(false);\n\n\tconst renderPage = useCallback((num) => {\n\t\tpageRendering.current = true;\n\t\t// Using promise to fetch the page\n\t\tpdfDoc?.getPage(num).then((page: PDFPageProxy) => {\n\t\t\tconst viewport = page.getViewport({ scale: scaleRef.current });\n\t\t\tpageCanvasRef.current.height = viewport.height;\n\t\t\tpageCanvasRef.current.width = viewport.width;\n\t\t\tconst ctx = pageCanvasRef.current.getContext(\"2d\") as CanvasRenderingContext2D;\n\n\t\t\t// Render PDF page into canvas context\n\t\t\tconst renderContext = {\n\t\t\t\tcanvasContext: ctx,\n\t\t\t\tviewport,\n\t\t\t\tenableWebGL: true\n\t\t\t};\n\n\t\t\tconst loadingTask = page.render(renderContext);\n\n\t\t\tloadingTask.promise.then(() => page.getAnnotations())\n\t\t\t\t.then((annotationData) => {\n\t\t\t\t\tlet annotationDiv: HTMLDivElement;\n\t\t\t\t\tif (enableAnnotations) {\n\t\t\t\t\t\tannotationDiv = document.createElement(\"div\");\n\t\t\t\t\t\tannotationDiv.id = `annot${num}`;\n\t\t\t\t\t\tannotationDiv.className = \"annotationLayer\";\n\n\t\t\t\t\t\tpdfjsLib.current.AnnotationLayer.render({\n\t\t\t\t\t\t\tviewport: viewport.clone({ dontFlip: true }),\n\t\t\t\t\t\t\tdiv: annotationDiv,\n\t\t\t\t\t\t\tannotations: annotationData,\n\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t\tlinkService\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tsetPages((oldPages) => {\n\t\t\t\t\t\tconst newPages = [...oldPages];\n\t\t\t\t\t\tconst { width, height } = viewportRef.current ?? { width: 100, height: 100 };\n\t\t\t\t\t\tnewPages[num] = (\n\t\t\t\t\t\t\t<PDFPage\n\t\t\t\t\t\t\t\tpageNum={num}\n\t\t\t\t\t\t\t\twidth={width}\n\t\t\t\t\t\t\t\theight={height}\n\t\t\t\t\t\t\t\timageSrc={pageCanvasRef.current.toDataURL(\"image/jpeg\", quality / 100)}\n                key={`page${num}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{ enableAnnotations ? parse(annotationDiv.outerHTML) : null}\n\t\t\t\t\t\t\t</PDFPage>\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn newPages;\n\t\t\t\t\t});\n\n\t\t\t\t\tpageRendering.current = false;\n\t\t\t\t\tpage.cleanup();\n\t\t\t\t\tif (renderQueue.current.length > 0) {\n\t\t\t\t\t\t// New page rendering is pending\n\t\t\t\t\t\tconst no = renderQueue.current.shift();\n\t\t\t\t\t\trenderPage(no);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t});\n\t\t});\n\t}, [pdfDoc, linkService, quality, enableAnnotations]);\n\n\tconst queueRenderPage = useCallback((num: number) => {\n\t\tif (pageRendering.current) {\n      if (!renderQueue.current.includes(num)) {\n        renderQueue.current.push(num);\n      }\n    }\n    else {\n      renderPage(num);\n    }\n\t}, [renderPage]);\n\n\tconst changeZoom = useCallback(({ scale, viewer, scrollContainer }: IChangeZoom) => {\n\t\trenderQueue.current.length = 0;\n\t\tscaleRef.current = scale;\n\t\tconst oldHeight = viewportRef.current?.height ?? 1;\n\t\tpdfDoc?.getPage(1).then((page) => {\n\t\t\tviewportRef.current = page.getViewport({ scale });\n\t\t\tconst { width, height } = viewportRef.current;\n\t\t\tpage.cleanup();\n\t\t\tlet currPage = 1;\n\t\t\tif (viewer && scrollContainer) {\n\t\t\t\tconst { children } = viewer ?? {};\n\t\t\t\tfor (let i = 0; i < children.length; i += 1) {\n\t\t\t\t\tif (children[i].offsetTop <= scrollContainer.scrollTop + 33) {\n\t\t\t\t\t\tcurrPage = i + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetPages((oldPages) => {\n\t\t\t\tconst newPages = oldPages.map((pg, index) => {\n\t\t\t\t\tif (!pg) {\n\t\t\t\t\t\treturn <Fragment></Fragment>;\n\t\t\t\t\t}\n\t\t\t\t\tconst { imageSrc, children } = pg.props;\n\t\t\t\t\tif (imageSrc) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<PDFPage key={`page${index}`} pageNum={index} width={width} height={height} imageSrc={imageSrc}>\n\t\t\t\t\t\t\t\t{ children }\n\t\t\t\t\t\t\t</PDFPage>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn <PlaceholderPage key={`page${index}`} width={width} height={height} loadingImage={loadingImage} />;\n\t\t\t\t});\n\t\t\t\treturn newPages;\n\t\t\t});\n\n\t\t\tqueueRenderPage(currPage);\n\t\t\tif (currPage + 1 < pdfDoc.numPages) {\n\t\t\t\tqueueRenderPage(currPage + 1);\n\t\t\t}\n\t\t\tfor (let i = 1; i <= pdfDoc.numPages; i += 1) {\n\t\t\t\tif (i !== currPage && i !== currPage + 1) {\n\t\t\t\t\tqueueRenderPage(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (scrollContainer) {\n\t\t\t\tconst scroller = scrollContainer;\n\t\t\t\tconst ratio = viewportRef.current.height / oldHeight;\n\t\t\t\tscroller.scrollTop *= ratio;\n\t\t\t}\n\t\t});\n\t}, [pdfDoc, queueRenderPage, loadingImage]);\n\n\tuseEffect(() => {\n\t\tif (pdfDoc) {\n\t\t\tpdfDoc.getPage(1).then((page) => {\n\t\t\t\tviewportRef.current = page.getViewport({ scale: scaleRef.current });\n\t\t\t\tpage.cleanup();\n\t\t\t\tsetPages((oldPages) => {\n\t\t\t\t\tconst { width, height } = viewportRef.current ?? { width: 100, height: 100 };\n\t\t\t\t\tconst { numPages } = pdfDoc;\n\t\t\t\t\tconst newPages = [...oldPages];\n\t\t\t\t\tfor (let i = 1; i <= numPages; i += 1) {\n\t\t\t\t\t\tnewPages[i] = <PlaceholderPage key={`page${i}`} width={width} height={height} loadingImage={loadingImage} />;\n\t\t\t\t\t}\n\t\t\t\t\treturn newPages;\n\t\t\t\t});\n\n\t\t\t\tfor (let i = 1; i <= pdfDoc.numPages; i += 1) {\n\t\t\t\t\tqueueRenderPage(i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [pdfDoc, queueRenderPage, loadingImage]);\n\n\tuseEffect(() => {\n    if ((source.url || source.data || source.range) && !_.isEqual(source, prevSource.current)) {\n      prevSource.current = source;\n      // @ts-ignore\n      import(\"pdfjs-dist/es5/build/pdf\").then((lib) => {\n        pdfjsLib.current = lib as IPDFJSLib;\n        // @ts-ignore\n        import(\"pdfjs-dist/es5/build/pdf.worker.entry\")\n          .then((pdfjsWorker) => {\n            pdfjsLib.current.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\n            const loadingTask = pdfjsLib.current?.getDocument({\n              cMapUrl: CMAP_URL,\n              cMapPacked: true,\n              ...source\n            });\n            loadingTask.promise.then((pdfDocument: PDFDocumentProxy) => {\n              // Document loaded, specifying document for the viewer and\n              // the (optional) linkService.\n              setPdfDoc(pdfDocument);\n            });\n          });\n      });\n    }\n\t}, [source]);\n\n\tuseEffect(() => () => {\n\t\tpdfDoc?.cleanup();\n\t\tpdfDoc?.destroy();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\treturn {\n\t\tchangeZoom,\n\t\tpages\n\t};\n};\n","import React, { SyntheticEvent, useRef, useState } from 'react';\nimport { usePDF } from \"pdf-viewer\";\n\nconst App = (): JSX.Element => {\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n\tconst viewerRef = useRef<HTMLDivElement>(null);\n\tconst [zoom, setZoom] = useState<number>(1);\n\tconst [file, setFile] = useState<Uint8Array>();\n\tconst sourceOptions = {\n\t\tdata: file\n\t}\n\tconst { pages, changeZoom } = usePDF({\n\t\tsource: sourceOptions\n\t})\n\tconst ZOOM_CHANGE: number = 0.1;\n\n\tconst zoomIn = () => {\n\t\tconst newZoom = zoom + ZOOM_CHANGE;\n\t\tif (newZoom > 0) {\n\t\t\tsetZoom(newZoom);\n\t\t\tchangeZoom({ scale: newZoom, scrollContainer: scrollContainerRef.current, viewer: viewerRef.current })\n\t\t}\n\t}\n\n\tconst zoomOut = () => {\n\t\tconst newZoom = zoom - ZOOM_CHANGE;\n\t\tif (newZoom < 2) {\n\t\t\tsetZoom(newZoom);\n\t\t\tchangeZoom({ scale: newZoom, scrollContainer: scrollContainerRef.current, viewer: viewerRef.current })\n\t\t}\n\t}\n\n\tconst fileChanged = (ev: SyntheticEvent<HTMLInputElement>) => {\n\t\tconst target = ev.target as HTMLInputElement;\n\t\tconst file = target.files?.[0]\n\t\tif (file) {\n\t\t\tvar fileReader = new FileReader();  \n\n\t\t\tfileReader.onload = (e) => {\n\t\t\t\tconst { result } = e.target as FileReader;\n\t\t\t\tconst arr = new Uint8Array(result as ArrayBuffer);\n\t\t\t\tsetFile(arr);\n\t\t\t};\n\t\t\tfileReader.readAsArrayBuffer(file);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<input type=\"file\" onChange={fileChanged} />\n\t\t\t<div id=\"scrollContainer\" ref={scrollContainerRef} style={{ overflow: \"scroll\", height: \"800px\" }}>\n\t\t\t\t<div id=\"viewer\" ref={viewerRef}>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<button type=\"button\" onClick={zoomIn}>+</button>\n\t\t\t<button type=\"button\" onClick={zoomOut}>-</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}